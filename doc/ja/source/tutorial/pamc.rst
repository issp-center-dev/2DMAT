ポピュレーションアニーリングによる探索
================================================================

ここでは、ポピュレーションアニーリングを用いて Himmelblau関数の最小化問題を解析する方法について説明します。
具体的な計算手順は ``minsearch`` の時と同様です。

サンプルファイルの場所
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

サンプルファイルは ``sample/analytical/pamc`` にあります。
フォルダには以下のファイルが格納されています。

- ``input.toml``

  メインプログラムの入力ファイル

- ``do.sh``

  本チュートリアルを一括計算するために準備されたスクリプト


入力ファイルの説明
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

メインプログラム用の入力ファイル ``input.toml`` について説明します。記述方法の詳細については「入力ファイル」の項を参照してください。

.. code-block::

    [base]
    dimension = 2
    output_dir = "output"

    [solver]
    name = "analytical"
    function_name = "himmelblau"

    [runner]
    [runner.log]
    interval = 20

    [algorithm]
    name = "pamc"
    seed = 12345

    [algorithm.param]
    max_list = [6.0, 6.0]
    min_list = [-6.0, -6.0]
    step_list = [0.3, 0.3]

    [algorithm.pamc]
    bmin = 0.0
    bmax = 200.0
    Tnum = 21
    Tlogspace = false
    numsteps_annealing = 100
    nreplica_per_proc = 100

ここではこの入力ファイルを簡単に説明します。
詳細は入力ファイルのレファレンスを参照してください。


``[base]``, ``[solver]``, ``[runner]`` のセクションについては Nelder-Mead法による探索(``minsearch``)の場合と同じです。

``[algorithm]`` セクションでは、使用するアルゴリスムとその設定を行います。

- ``name`` は使用するアルゴリズムの名前です。このチュートリアルでは、ポピュレーションアニーリング法による解析を行うので、 ``pamc`` を指定します。

``[algorithm.param]`` セクションでは、探索する連続なパラメータ空間の設定を行います。

- ``min_list`` と ``max_list`` はそれぞれ探索範囲の最小値と最大値を指定します。

- ``step_list`` はモンテカルロ更新の際の変化幅(ガウス分布の偏差)です。

``[algorithm.pamc]`` セクションは、ポピュレーションアニーリングのハイパーパラメータを指定します。

- ``numsteps_annealing`` で指定した回数のモンテカルロ更新の後に、逆温度を増やします (温度を下げます)。

- ``bmin``, ``bmax`` はそれぞれ逆温度の下限・上限です。

- ``Tnum`` は計算する温度・逆温度の点数です。

- ``Tlogspace`` が ``true`` の場合、温度を対数空間で等分割します

- ``nreplica_per_proc`` はMPIプロセスひとつが受け持つ計算レプリカの数です。


計算の実行
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

最初にサンプルファイルが置いてあるフォルダへ移動します。(以下、本ソフトウェアをダウンロードしたディレクトリ直下にいることを仮定します。)

.. code-block::

    $ cd sample/analytical/pamc

メインプログラムを実行します。計算時間は通常のPCで数秒程度で終わります。

.. code-block::

    $ mpiexec -np 4 python3 ../../../src/py2dmat_main.py input.toml | tee log.txt

ここではプロセス数4のMPI並列を用いた計算を行っています。
OpenMPI を用いる場合で、使えるコア数よりも要求プロセス数の方が多い時には、 ``mpiexec`` コマンドに ``--oversubscribed`` オプションを追加してください。

実行すると、 ``output`` ディレクトリの下に各ランクのフォルダが作成され、温度ごとに、各モンテカルロステップで評価したパラメータおよび目的関数の値を記した ``trial_TXXX.txt`` ファイル(``XXX`` は温度点の番号)と、実際に採択されたパラメータを記した ``result_TXXX.txt`` ファイル、さらにそれぞれを結合した ``trial.txt``, ``result.txt`` ファイルが生成されます。
それぞれ書式は同じで、最初の2列がステップ数とプロセス内の walker (replica) 番号、次が(逆)温度、3列目が目的関数の値、4列目以降がパラメータです。
最後の2 列は、 walker の重み (Neal-Jarzynski weight) と祖先(計算を開始したときのレプリカ)の番号です。

.. code-block::

    # step walker beta fx x1 x2 weight ancestor
    0 0 0.0 187.94429125133564 5.155393113805774 -2.203493345018569 1.0 0
    0 1 0.0 3.179380982615041 -3.7929742598748666 -3.5452766573635235 1.0 1
    0 2 0.0 108.25464277273859 0.8127003489802398 1.1465364357510186 1.0 2
    0 3 0.0 483.84183395038843 5.57417423682746 1.8381251624588506 1.0 3
    0 4 0.0 0.43633134370869153 2.9868796504069426 1.8428384502208246 1.0 4
    0 5 0.0 719.7992581349758 2.972577711255287 5.535680832873856 1.0 5
    0 6 0.0 452.4691017123836 -5.899340424701358 -4.722667479627368 1.0 6
    0 7 0.0 45.5355817998709 -2.4155554347674215 1.8769341969872393 1.0 7
    0 8 0.0 330.7972369561986 3.717750630491217 4.466110964691396 1.0 8
    0 9 0.0 552.0479484091458 5.575771168463163 2.684224163039442 1.0 9
    0 10 0.0 32.20027165958588 1.7097039347500953 2.609443449748964 1.0 10
    ...

``output/best_result.txt`` に、目的関数が最小となったパラメータとそれを得たランク、モンテカルロステップの情報が書き込まれます。

.. code-block::

    nprocs = 4
    rank = 0
    step = 1416
    walker = 76
    fx = 1.2934852891645974e-05
    x1 = 3.5849122439454018
    x2 = -1.8479993173120015

最後に、 ``output/fx.txt`` には、各温度ごとの統計情報が記録されます。

.. code-block::

    # $1: 1/T
    # $2: mean of f(x)
    # $3: standard error of f(x)
    # $4: number of replicas
    # $5: log(Z/Z0)
    # $6: acceptance ratio
    0.0 300.30221072734275 15.51347277317414 400 0.0 0.95625
    10.0 0.10242968777639305 0.004707441824226148 400 -6.288173357129039 0.078525
    20.0 0.057183322050182284 0.002645707013463865 400 -7.016157801630186 0.023825
    30.0 0.04113146664363754 0.0019866335071532255 400 -7.477440282564104 0.015575
    40.0 0.030213182090724544 0.0014292149366135543 400 -7.82499342385409 0.01135
    ...

1列目は温度・逆温度で、2・3列目は目的関数 :math:`f(x)` の期待値と標準誤差、4列目はレプリカの個数、5列目は分配関数の比の対数 :math:`\log(Z_n/Z_0)` (:math:`Z_0` は最初の温度点における分配関数)、6列目はモンテカルロ更新の採択率です。


計算結果の可視化
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``result_T%.txt`` を図示することで ``f(x)`` の小さいパラメータがどこにあるかを推定することができます。
以下のコマンドを入力すると 2次元パラメータ空間の図 ``res_T%.png`` が作成されます。
シンボルの色は目的関数の値に対応します。

.. code-block::

    $ python3 plot_result_2d.py -o res_T0.png result_T0.txt

作成された図を見ると、 ``f(x)`` の最小値を与える点の付近にサンプルが集中していることと、目的関数の値が小さいことがわかります。

.. figure:: ../../../common/img/res_pamc_T0.*

.. figure:: ../../../common/img/res_pamc_T1.*

    サンプルされたパラメータ。横軸は ``x1`` , 縦軸は ``x2`` を、色は ``f(x)`` を表す。

